VARIABLES:
Local
Instance (Non-Static)
Static (Class)
Constant
ReadOnly

DATA TYPES:
Value datatypes
    Predefined datatypes
        Integer
        Boolean
        Float
    User defined datatypes
        Enumerations
        Sturctures

Pointer Data Types

Reference datatypes
    Predefined datatypes
        Objects
        Strings
    User defined datatypes
        Classes
        Interfaces

PRACTICE QUIZ:
1. What is C#?
    A programming language for developing applications on the .NET framework

2. Which of the following statements is true about the readonly keyword in C#?
    It allows for a variable to be assigned a value once and then cannot be changed

3. How do you execute C# code?
    By compiling the code into an executable file and running it

4. What is Visual Studio?
    An IDE for developing applications on the .NET framework

5. What is a variable in C#?
    A named memory location used to store a value that can be modified during program execution, and has a specific data type

JUMP STATEMENTS:
break -> termina um loop ou um switch
continue -> salta para a iteração seguinte de um loop
goto -> transfere o controle para um rótulo
return -> termina a execução de um método e retorna um valor
throw -> lança uma exceção

PRACTICE QUIZ:
1. Which of the following operators has the highest precedence in C#?
    ()

2. What is the result of the following code?
    50

3. What is the syntax for a do-while loop in C#?
    do {} while (condition);

4. What is the output of the following code?
    y is greater then x

5. What is the difference between a while loop and a do..while loop?
    A while loop checks the condition before executing the loop body, while a do..while loop executes the loop body at least once before checking the condition

6. What is the result of the following expression?
    14

7. What is the output of the following code snippet?
    x is less then y

8. What is the output of the following code snippet?
    0 1 2 3 4

9. What is the result of the following expression: 5 + 2 * 3?
    11

10. What is the purpose of the "else if" statement in a conditional statement?
    To test another condition if the previous condition is false

11. Which of the following loops is best suited for iterating over an array in C#?
    foreach loop

12. What is the output of the following code?
    0 1 2 3 4

13. Which of the following operators has the highest precedence?
    Incremente (++)

14. Which of the following conditional statements allows for multiple conditions to be tested?
    if..else if

15. Which of the following loops will always execute at least once
    do..while loop

16. Which of the following jump statements transfers program control to a labeled statement?
    goto

17. What is the output of the following code snippet?
    0 1 3 4

18. What is the value of x after the following code is executed?
    25

19. What is the result of the following code?
    1 2 3 4 5

20. Which of the following is not a jump statement in C#?
    print

ARRAYS:

One-Dimensional Arrays
    Exemplo:
        int [] age;
        age = new int[5];

Multi-Dimensional Arrays
    Exemplo:
        int [,] age = new int[5, 5];

Jagged Arrays
    An array of arrays, where each sub-array can have DIFFERENT LENGTHS
    Exemplo:
        int[][] myArray = new int[3][];
        myArray[0] = new int[2] { 1, 2 };
        myArray[1] = new int[3] { 3, 4, 5 };
        myArray[2] = new int[4] { 6, 7, 8, 9 };

STRING:

String Methods
    Clone()     ->  Creates a copy of the string
    CompareTo() ->  Compares the string to another string and returns an integer indicating their relative order
    Contains()  ->  Checks if the string contains a specified substring
    EndWith()   ->  Checks if the string ends with a specified substring
    Equals()    ->  Compares the string to another string for equality
    ToUpper()   ->  Converts the string to uppercase
    ToLower()   ->  Converts the string to lowercase
    Insert()    ->  Inserts a substring at a specified index
    IndexOf()   ->  Returns the index of the first occurrence of a specified substring

PRACTICE QUIZ:
What is an array in C#?
    A collection of values of the same data type, stored in contiguous memory locations

What are the types of arrays in C#?
    One-dimensional, multi-dimensional, and jagged arrays

What is a string in C#?
    A sequence of characters, stored as an array of characters in contiguous memory locations

What is the difference between the Length and Count properties of a string?
    Length is a property of the string class that returns the number of characters in the string, while Count is a property of collections that returns the number of elements in the collection
 
What is a string method in C#?
    A pre-defined function provided by the .NET framework that can be called on a string object to perform operations on the string, such as searching, replacing, or formatting

OOP
Classes
    A blueprint for creating objects, containing properties and methods
Obejcts
    An instance of a class, created using the new keyword
Encapsulation
    The bundling of data and methods that operate on that data within a single unit (class)
Abstraction
    The concept of hiding the implementation details and showing only the essential features of an object
Inheritance
    The mechanism by which one class can inherit the properties and methods of another class
Polymorphism
    The ability of different classes to be treated as instances of the same class through a common interface
Interfaces
    A contract that defines a set of methods and properties that a class must implement, without providing the implementation details
Abstract Classes
    A class that cannot be instantiated and can contain abstract methods (methods without implementation) as well as concrete methods (methods with implementation)

ACCESS MODIFIERS:
Public
    Accessible from any class
Private
    Accessible only within the class
Internal
    Accessible only within the same assembly
Protected
    Accessible within the class and its derived classes
Protected Internal
    Accessible within the same assembly and in derived classes
Sealed
    Prevents a class from being inherited
Static
    Belongs to the class itself rather than to any specific instance of the class
Virtual
    Allows a method to be overridden in a derived class
Abstract
    Declares a method that must be implemented in a derived class
Override
    Provides a new implementation for a method that is inherited from a base class
New
    Hides a member inherited from a base class
Static
    Belongs to the class itself rather than to any specific instance of the class
Const
    A constant value that cannot be changed after it is declared
ReadOnly
    A variable that can only be assigned a value once, either at declaration or in the constructor of the class
Static Constructor
    A constructor that is called once for the class, before any instances of the class are created
Static Class
    A class that cannot be instantiated and can only contain static members
Static Method
    A method that belongs to the class itself rather than to any specific instance of the class
Static Property
    A property that belongs to the class itself rather than to any specific instance of the class
Static Field
    A field that belongs to the class itself rather than to any specific instance of the class
Static Event
    An event that belongs to the class itself rather than to any specific instance of the class
Static Indexer
    An indexer that belongs to the class itself rather than to any specific instance of the class
Static Operator
    An operator that belongs to the class itself rather than to any specific instance of the class
