POLYMORPHISM:
Polymorphism is the ability of different classes to be treated as instances of the same class through a common interface.

Compiler vs Runtime Polymorphism:
Compiler Polymorphism: Achieved through method overloading and operator overloading.

	Method-Overloading: Multiple methods with the same name but different parameters.
	Example:
		class MathOperations {
			int add(int a, int b) {
				return a + b;
			}
			double add(double a, double b) {
				return a + b;
			}
		}
	Operator-Overloading: Giving new meaning to existing operators for user-defined types.
	Example:
		class Complex {
			int real, imag;
			Complex operator+(Complex c) {
				Complex temp;
				temp.real = real + c.real;
				temp.imag = imag + c.imag;
				return temp;
			}
		}
	Constructor Overloading: Multiple constructors with different parameters.
	Example:
		class Box {
			int length, breadth, height;
			Box(int l) { length = breadth = height = l; }
			Box(int l, int b, int h) { length = l; breadth = b; height = h; }
		}

Runtime Polymorphism: Achieved through method overriding.

ABSTRACTION:
Abstraction is the concept of hiding the complex implementation details and showing only the essential features of the object.

Abstract Class:
Cannot be instanciated
Contains abstract methods (without implementation) and concrete methods (with implementation).
Example:
	class Shape {
		abstract void draw();
		void display() {
			System.out.println("Displaying shape");
		}
	}

Abstract Method:
A method without a body, declared in an abstract class.
Example:
	abstract void draw();

INTERFACES:
All methods in an interface are abstract by default.
An interface cannot contain instance variables.
An interface can extend multiple interfaces.
An interface can be implemented by any class, from any inheritance tree.
Example:
	interface Animal {
		void eat();
		void sleep();
	}
	class Dog implements Animal {
		public void eat() {
			System.out.println("Dog eats");
		}
		public void sleep() {
			System.out.println("Dog sleeps");
		}
	}

Advantages of Interfaces:
It is used to achieve loose coupling.
It is used to achieve total abstraction.
It is used to achieve component-based programming.
It is used to achieve multiple inheritance and abstraction.

STATIC CLASSES:
Static classes are classes that cannot be instantiated and can only contain static members.
Static classes are used to group related methods and properties together.
Static classes are often used for utility or helper classes or group constants.
Example:
	class MathUtils {
		static int add(int a, int b) {
			return a + b;
		}
		static int subtract(int a, int b) {
			return a - b;
		}
	}

EXTENTION METHODS:
Extension methods allow you to add new methods to existing types without modifying the original type.
Extension methods are defined as static methods in a static class, with the first parameter specifying the type to extend.
The class name should be the first parameter name, preceded by the "this" keyword.
Example:
	static class StringExtensions {
		public static int WordCount(this string str) {
			return str.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Length;
		}
	}
}

PARTIAL CLASSES:
Partial classes allow you to split the definition of a class, struct, or interface into multiple files.
Partial classes are useful for organizing large classes or when multiple developers are working on the same class.
It's always void to use partial classes for small classes or when the class is not expected to grow significantly.
Partial classes are defined using the "partial" keyword in each file.
Example:
	// File1.cs
	public partial class MyClass {
		public void Method1() {
			Console.WriteLine("Method1");
		}
	}
	// File2.cs
	public partial class MyClass {
		public void Method2() {
			Console.WriteLine("Method2");
		}
	}
// Usage
	MyClass obj = new MyClass();
	obj.Method1(); // Output: Method1
	obj.Method2(); // Output: Method2
}
// File3.cs
public partial class MyClass {
	public void Method3() {
		Console.WriteLine("Method3");
	}
}
// Usage
MyClass obj = new MyClass();
obj.Method1(); // Output: Method1
obj.Method2(); // Output: Method2
obj.Method3(); // Output: Method3

PRACTICE QUIZ:
Question 1 What is an abstract class in C#?
	A class that cannot be instantiated and may contain abstract and non-abstract methods.

Question 2 What is an interface in C#?
	A contract that defines a set of methods and properties that implementing classes must provide.

Question 3 What is the main difference between an interface and an abstract class in C#?
	An interface cannot contain any implementation, while an abstract class can contain both abstract and non-abstract methods.

Question 4 What is a static class in C#?
	A class that cannot be instantiated and can only contain static members.

Question 5 What is the purpose of the ref keyword in C#?   
	To pass a parameter by reference, allowing the method to modify the original value.

PROPERTIES:
Properties are special methods that provide a flexible mechanism to read, write, or compute the value of a private field.

Property Types:
Read-Write Property: Allows both getting and setting the value.
Read-Only Property: Allows only getting the value.
Write-Only Property: Allows only setting the value.
Auto-Implemented Property: Simplifies property declaration by automatically creating a backing field.

INDEXERS:
Indexers allow instances of a class or struct to be indexed like arrays.
An indexer is defined using the this keyword and can have one or more parameters.
Indexers can be used to provide array-like access to a collection of objects.
Example:
	class MyCollection {
		private int[] arr = new int[10];
		public int this[int index] {
			get { return arr[index]; }
			set { arr[index] = value; }
		}
	}
}

ENUMS:
Enums are a special "class" that represents a group of constants (unchangeable/read-only variables).
Fixed set of related constants.
Enums are used to define a variable that can hold a set of predefined constants.
Enums are strongly typed, meaning they can only hold values defined in the enum.

HANDLING EXCEPTIONS:
Exception handling is a mechanism to handle runtime errors in a controlled manner.
It allows the program to continue executing even when an error occurs.

Keywords:
try -> used to define a try block. This block holds the code that may throw an exception
catch -> used to define a catch block. This block holds the code that handles the exception
finally -> used to define a finally block. This block holds the code that will always execute, regardless of whether an exception occurred or not
throw -> used to throw an exception manually

PRACTICE QUIZ:
