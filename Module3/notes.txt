POLYMORPHISM:
Polymorphism is the ability of different classes to be treated as instances of the same class through a common interface.

Compiler vs Runtime Polymorphism:
Compiler Polymorphism: Achieved through method overloading and operator overloading.

	Method-Overloading: Multiple methods with the same name but different parameters.
	Example:
		class MathOperations {
			int add(int a, int b) {
				return a + b;
			}
			double add(double a, double b) {
				return a + b;
			}
		}
	Operator-Overloading: Giving new meaning to existing operators for user-defined types.
	Example:
		class Complex {
			int real, imag;
			Complex operator+(Complex c) {
				Complex temp;
				temp.real = real + c.real;
				temp.imag = imag + c.imag;
				return temp;
			}
		}
	Constructor Overloading: Multiple constructors with different parameters.
	Example:
		class Box {
			int length, breadth, height;
			Box(int l) { length = breadth = height = l; }
			Box(int l, int b, int h) { length = l; breadth = b; height = h; }
		}

Runtime Polymorphism: Achieved through method overriding.

ABSTRACTION:
Abstraction is the concept of hiding the complex implementation details and showing only the essential features of the object.

Abstract Class:
Cannot be instanciated
Contains abstract methods (without implementation) and concrete methods (with implementation).
Example:
	class Shape {
		abstract void draw();
		void display() {
			System.out.println("Displaying shape");
		}
	}

Abstract Method:
A method without a body, declared in an abstract class.
Example:
	abstract void draw();

INTERFACES:
All methods in an interface are abstract by default.
An interface cannot contain instance variables.
An interface can extend multiple interfaces.
An interface can be implemented by any class, from any inheritance tree.
Example:
	interface Animal {
		void eat();
		void sleep();
	}
	class Dog implements Animal {
		public void eat() {
			System.out.println("Dog eats");
		}
		public void sleep() {
			System.out.println("Dog sleeps");
		}
	}

Advantages of Interfaces:
It is used to achieve loose coupling.
It is used to achieve total abstraction.
It is used to achieve component-based programming.
It is used to achieve multiple inheritance and abstraction.
